"""autogenerated by genpy from hrl_haptic_manipulation_in_clutter_srvs/LogAndMonitorInfoRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LogAndMonitorInfoRequest(genpy.Message):
  _md5sum = "e045f94af367795b99be0b4906cfb194"
  _type = "hrl_haptic_manipulation_in_clutter_srvs/LogAndMonitorInfoRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """




string logging_name


geometry_msgs/Pose torso_pose



geometry_msgs/Point local_goal







float64 stopping_force

float64 ee_motion_threshold

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['logging_name','torso_pose','local_goal','stopping_force','ee_motion_threshold']
  _slot_types = ['string','geometry_msgs/Pose','geometry_msgs/Point','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       logging_name,torso_pose,local_goal,stopping_force,ee_motion_threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LogAndMonitorInfoRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.logging_name is None:
        self.logging_name = ''
      if self.torso_pose is None:
        self.torso_pose = geometry_msgs.msg.Pose()
      if self.local_goal is None:
        self.local_goal = geometry_msgs.msg.Point()
      if self.stopping_force is None:
        self.stopping_force = 0.
      if self.ee_motion_threshold is None:
        self.ee_motion_threshold = 0.
    else:
      self.logging_name = ''
      self.torso_pose = geometry_msgs.msg.Pose()
      self.local_goal = geometry_msgs.msg.Point()
      self.stopping_force = 0.
      self.ee_motion_threshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.logging_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12d.pack(_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.local_goal.x, _x.local_goal.y, _x.local_goal.z, _x.stopping_force, _x.ee_motion_threshold))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.torso_pose is None:
        self.torso_pose = geometry_msgs.msg.Pose()
      if self.local_goal is None:
        self.local_goal = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.logging_name = str[start:end].decode('utf-8')
      else:
        self.logging_name = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.local_goal.x, _x.local_goal.y, _x.local_goal.z, _x.stopping_force, _x.ee_motion_threshold,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.logging_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12d.pack(_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.local_goal.x, _x.local_goal.y, _x.local_goal.z, _x.stopping_force, _x.ee_motion_threshold))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.torso_pose is None:
        self.torso_pose = geometry_msgs.msg.Pose()
      if self.local_goal is None:
        self.local_goal = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.logging_name = str[start:end].decode('utf-8')
      else:
        self.logging_name = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.local_goal.x, _x.local_goal.y, _x.local_goal.z, _x.stopping_force, _x.ee_motion_threshold,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12d = struct.Struct("<12d")
"""autogenerated by genpy from hrl_haptic_manipulation_in_clutter_srvs/LogAndMonitorInfoResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LogAndMonitorInfoResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "hrl_haptic_manipulation_in_clutter_srvs/LogAndMonitorInfoResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LogAndMonitorInfoResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class LogAndMonitorInfo(object):
  _type          = 'hrl_haptic_manipulation_in_clutter_srvs/LogAndMonitorInfo'
  _md5sum = 'e045f94af367795b99be0b4906cfb194'
  _request_class  = LogAndMonitorInfoRequest
  _response_class = LogAndMonitorInfoResponse
