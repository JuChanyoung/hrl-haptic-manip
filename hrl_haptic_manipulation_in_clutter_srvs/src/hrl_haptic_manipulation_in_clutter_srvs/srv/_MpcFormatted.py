"""autogenerated by genpy from hrl_haptic_manipulation_in_clutter_srvs/MpcFormattedRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hrl_haptic_manipulation_in_clutter_msgs.msg
import std_msgs.msg

class MpcFormattedRequest(genpy.Message):
  _md5sum = "e6a4104b937ab550452a4a24717bace9"
  _type = "hrl_haptic_manipulation_in_clutter_srvs/MpcFormattedRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """hrl_haptic_manipulation_in_clutter_msgs/MpcDynFormattedData opt_data

================================================================================
MSG: hrl_haptic_manipulation_in_clutter_msgs/MpcDynFormattedData

Header header

float64 alpha
float64 beta
float64 gamma
float64 zeta
float64 mu
float64 state_scaling
float64[] delta_x_d
float64[] A_tl
float64[] A_tr
float64[] A_bl
float64[] A_br
float64[] B_t1
float64[] B_t2
float64[] B_t3
float64[] B_b1
float64[] B_b2
float64[] B_b3
#float64[] qd_max
float64[] u_max
float64[] zeros
float64[] q_min
float64[] q_max
float64[] delta_f_max
float64[] delta_rate_f_max
#float64[] delta_cont_vel_max
float64[] n_K_J_all
float64[] n_Kd_J_all
float64[] n_J_all
#float64[] n_K_J_over
#float64[] delta_f_des
float64[] vel_norm_J
float64[] all_J_T_K_J
float64[] J
float64[] tau_max_delta_t
#float64[] f_max_delta_t
#float64[] mass_n_J_com
float64[] mass
#float64[] Kp
#float64[] Kd
float64[] q_des_cur_0
float64[] qd_0
float64[] q_0
float64[] tau_cont_sum_0

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['opt_data']
  _slot_types = ['hrl_haptic_manipulation_in_clutter_msgs/MpcDynFormattedData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       opt_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MpcFormattedRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.opt_data is None:
        self.opt_data = hrl_haptic_manipulation_in_clutter_msgs.msg.MpcDynFormattedData()
    else:
      self.opt_data = hrl_haptic_manipulation_in_clutter_msgs.msg.MpcDynFormattedData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.opt_data.header.seq, _x.opt_data.header.stamp.secs, _x.opt_data.header.stamp.nsecs))
      _x = self.opt_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.opt_data.alpha, _x.opt_data.beta, _x.opt_data.gamma, _x.opt_data.zeta, _x.opt_data.mu, _x.opt_data.state_scaling))
      length = len(self.opt_data.delta_x_d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.delta_x_d))
      length = len(self.opt_data.A_tl)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.A_tl))
      length = len(self.opt_data.A_tr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.A_tr))
      length = len(self.opt_data.A_bl)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.A_bl))
      length = len(self.opt_data.A_br)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.A_br))
      length = len(self.opt_data.B_t1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.B_t1))
      length = len(self.opt_data.B_t2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.B_t2))
      length = len(self.opt_data.B_t3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.B_t3))
      length = len(self.opt_data.B_b1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.B_b1))
      length = len(self.opt_data.B_b2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.B_b2))
      length = len(self.opt_data.B_b3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.B_b3))
      length = len(self.opt_data.u_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.u_max))
      length = len(self.opt_data.zeros)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.zeros))
      length = len(self.opt_data.q_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.q_min))
      length = len(self.opt_data.q_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.q_max))
      length = len(self.opt_data.delta_f_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.delta_f_max))
      length = len(self.opt_data.delta_rate_f_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.delta_rate_f_max))
      length = len(self.opt_data.n_K_J_all)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.n_K_J_all))
      length = len(self.opt_data.n_Kd_J_all)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.n_Kd_J_all))
      length = len(self.opt_data.n_J_all)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.n_J_all))
      length = len(self.opt_data.vel_norm_J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.vel_norm_J))
      length = len(self.opt_data.all_J_T_K_J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.all_J_T_K_J))
      length = len(self.opt_data.J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.J))
      length = len(self.opt_data.tau_max_delta_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.tau_max_delta_t))
      length = len(self.opt_data.mass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.mass))
      length = len(self.opt_data.q_des_cur_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.q_des_cur_0))
      length = len(self.opt_data.qd_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.qd_0))
      length = len(self.opt_data.q_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.q_0))
      length = len(self.opt_data.tau_cont_sum_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.opt_data.tau_cont_sum_0))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.opt_data is None:
        self.opt_data = hrl_haptic_manipulation_in_clutter_msgs.msg.MpcDynFormattedData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.opt_data.header.seq, _x.opt_data.header.stamp.secs, _x.opt_data.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.opt_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.opt_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.opt_data.alpha, _x.opt_data.beta, _x.opt_data.gamma, _x.opt_data.zeta, _x.opt_data.mu, _x.opt_data.state_scaling,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.delta_x_d = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_tl = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_tr = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_bl = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_br = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_t1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_t2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_t3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_b1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_b2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_b3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.u_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.zeros = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_min = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.delta_f_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.delta_rate_f_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.n_K_J_all = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.n_Kd_J_all = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.n_J_all = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.vel_norm_J = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.all_J_T_K_J = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.J = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.tau_max_delta_t = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.mass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_des_cur_0 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.qd_0 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_0 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.tau_cont_sum_0 = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.opt_data.header.seq, _x.opt_data.header.stamp.secs, _x.opt_data.header.stamp.nsecs))
      _x = self.opt_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.opt_data.alpha, _x.opt_data.beta, _x.opt_data.gamma, _x.opt_data.zeta, _x.opt_data.mu, _x.opt_data.state_scaling))
      length = len(self.opt_data.delta_x_d)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.delta_x_d.tostring())
      length = len(self.opt_data.A_tl)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.A_tl.tostring())
      length = len(self.opt_data.A_tr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.A_tr.tostring())
      length = len(self.opt_data.A_bl)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.A_bl.tostring())
      length = len(self.opt_data.A_br)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.A_br.tostring())
      length = len(self.opt_data.B_t1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.B_t1.tostring())
      length = len(self.opt_data.B_t2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.B_t2.tostring())
      length = len(self.opt_data.B_t3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.B_t3.tostring())
      length = len(self.opt_data.B_b1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.B_b1.tostring())
      length = len(self.opt_data.B_b2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.B_b2.tostring())
      length = len(self.opt_data.B_b3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.B_b3.tostring())
      length = len(self.opt_data.u_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.u_max.tostring())
      length = len(self.opt_data.zeros)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.zeros.tostring())
      length = len(self.opt_data.q_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.q_min.tostring())
      length = len(self.opt_data.q_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.q_max.tostring())
      length = len(self.opt_data.delta_f_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.delta_f_max.tostring())
      length = len(self.opt_data.delta_rate_f_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.delta_rate_f_max.tostring())
      length = len(self.opt_data.n_K_J_all)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.n_K_J_all.tostring())
      length = len(self.opt_data.n_Kd_J_all)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.n_Kd_J_all.tostring())
      length = len(self.opt_data.n_J_all)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.n_J_all.tostring())
      length = len(self.opt_data.vel_norm_J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.vel_norm_J.tostring())
      length = len(self.opt_data.all_J_T_K_J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.all_J_T_K_J.tostring())
      length = len(self.opt_data.J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.J.tostring())
      length = len(self.opt_data.tau_max_delta_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.tau_max_delta_t.tostring())
      length = len(self.opt_data.mass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.mass.tostring())
      length = len(self.opt_data.q_des_cur_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.q_des_cur_0.tostring())
      length = len(self.opt_data.qd_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.qd_0.tostring())
      length = len(self.opt_data.q_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.q_0.tostring())
      length = len(self.opt_data.tau_cont_sum_0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.opt_data.tau_cont_sum_0.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.opt_data is None:
        self.opt_data = hrl_haptic_manipulation_in_clutter_msgs.msg.MpcDynFormattedData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.opt_data.header.seq, _x.opt_data.header.stamp.secs, _x.opt_data.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.opt_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.opt_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.opt_data.alpha, _x.opt_data.beta, _x.opt_data.gamma, _x.opt_data.zeta, _x.opt_data.mu, _x.opt_data.state_scaling,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.delta_x_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_tl = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_tr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_bl = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.A_br = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_t1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_t2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_t3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_b1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_b2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.B_b3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.u_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.zeros = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_min = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.delta_f_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.delta_rate_f_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.n_K_J_all = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.n_Kd_J_all = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.n_J_all = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.vel_norm_J = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.all_J_T_K_J = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.J = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.tau_max_delta_t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.mass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_des_cur_0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.qd_0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.q_0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.opt_data.tau_cont_sum_0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6d = struct.Struct("<6d")
"""autogenerated by genpy from hrl_haptic_manipulation_in_clutter_srvs/MpcFormattedResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hrl_msgs.msg

class MpcFormattedResponse(genpy.Message):
  _md5sum = "3bbdad6885acefdb5054a0d7a08889fb"
  _type = "hrl_haptic_manipulation_in_clutter_srvs/MpcFormattedResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 input_cost
hrl_msgs/FloatArrayBare delta_jep
hrl_msgs/FloatArrayBare total_input_change
hrl_msgs/FloatArrayBare qd_eps
hrl_msgs/FloatArrayBare f_eps
hrl_msgs/FloatArrayBare final_q

================================================================================
MSG: hrl_msgs/FloatArrayBare
float64[] data


"""
  __slots__ = ['input_cost','delta_jep','total_input_change','qd_eps','f_eps','final_q']
  _slot_types = ['float64','hrl_msgs/FloatArrayBare','hrl_msgs/FloatArrayBare','hrl_msgs/FloatArrayBare','hrl_msgs/FloatArrayBare','hrl_msgs/FloatArrayBare']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input_cost,delta_jep,total_input_change,qd_eps,f_eps,final_q

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MpcFormattedResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.input_cost is None:
        self.input_cost = 0.
      if self.delta_jep is None:
        self.delta_jep = hrl_msgs.msg.FloatArrayBare()
      if self.total_input_change is None:
        self.total_input_change = hrl_msgs.msg.FloatArrayBare()
      if self.qd_eps is None:
        self.qd_eps = hrl_msgs.msg.FloatArrayBare()
      if self.f_eps is None:
        self.f_eps = hrl_msgs.msg.FloatArrayBare()
      if self.final_q is None:
        self.final_q = hrl_msgs.msg.FloatArrayBare()
    else:
      self.input_cost = 0.
      self.delta_jep = hrl_msgs.msg.FloatArrayBare()
      self.total_input_change = hrl_msgs.msg.FloatArrayBare()
      self.qd_eps = hrl_msgs.msg.FloatArrayBare()
      self.f_eps = hrl_msgs.msg.FloatArrayBare()
      self.final_q = hrl_msgs.msg.FloatArrayBare()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.input_cost))
      length = len(self.delta_jep.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.delta_jep.data))
      length = len(self.total_input_change.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.total_input_change.data))
      length = len(self.qd_eps.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.qd_eps.data))
      length = len(self.f_eps.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.f_eps.data))
      length = len(self.final_q.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.final_q.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.delta_jep is None:
        self.delta_jep = hrl_msgs.msg.FloatArrayBare()
      if self.total_input_change is None:
        self.total_input_change = hrl_msgs.msg.FloatArrayBare()
      if self.qd_eps is None:
        self.qd_eps = hrl_msgs.msg.FloatArrayBare()
      if self.f_eps is None:
        self.f_eps = hrl_msgs.msg.FloatArrayBare()
      if self.final_q is None:
        self.final_q = hrl_msgs.msg.FloatArrayBare()
      end = 0
      start = end
      end += 8
      (self.input_cost,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.delta_jep.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.total_input_change.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.qd_eps.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.f_eps.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.final_q.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.input_cost))
      length = len(self.delta_jep.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.delta_jep.data.tostring())
      length = len(self.total_input_change.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.total_input_change.data.tostring())
      length = len(self.qd_eps.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.qd_eps.data.tostring())
      length = len(self.f_eps.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.f_eps.data.tostring())
      length = len(self.final_q.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.final_q.data.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.delta_jep is None:
        self.delta_jep = hrl_msgs.msg.FloatArrayBare()
      if self.total_input_change is None:
        self.total_input_change = hrl_msgs.msg.FloatArrayBare()
      if self.qd_eps is None:
        self.qd_eps = hrl_msgs.msg.FloatArrayBare()
      if self.f_eps is None:
        self.f_eps = hrl_msgs.msg.FloatArrayBare()
      if self.final_q is None:
        self.final_q = hrl_msgs.msg.FloatArrayBare()
      end = 0
      start = end
      end += 8
      (self.input_cost,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.delta_jep.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.total_input_change.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.qd_eps.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.f_eps.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.final_q.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
class MpcFormatted(object):
  _type          = 'hrl_haptic_manipulation_in_clutter_srvs/MpcFormatted'
  _md5sum = 'bc7938c4d51e5225be88b7e93fe2dae0'
  _request_class  = MpcFormattedRequest
  _response_class = MpcFormattedResponse
