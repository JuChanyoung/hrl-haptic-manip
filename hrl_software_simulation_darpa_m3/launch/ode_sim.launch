
<launch>
    <!-- simulate taxels -->
    <arg name="use_taxels" default="1" />
    <arg name="simulate_ft_sensor_at_link_base" default="0" />

    <!-- randomly generate obstacles -->
    <arg name="random" default="0" />

    <!-- radius of the obstacles -->
    <arg name="radius" default="0.01" />
    <arg name="n_sliding" default="100" />
    <arg name="n_fixed" default="20" />

    <!-- defines if obstacles have stiffness -->
    <arg name="n_compliant" default="0" />    
    <arg name="stiffness_value" default="0" />    

    <!-- planar arm with or without hand -->
    <arg name="with_hand" default="0" />

    <rosparam command="delete" param="m3" />
    <rosparam command="delete" param="roslaunch" />

    <rosparam> 
        use_sim_time: true
        m3/software_testbed/resolution: 100
    </rosparam>

    <!-- Need a static transform between world and torso_lift_link-->
    <node pkg="tf" name="static_tf_world_torso_broadcaster"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 1 world torso_lift_link 100"
        respawn="false" output="log"/>

    <!-- use skin taxels here -->
    <group if="$(arg use_taxels)">
        <node pkg="hrl_common_code_darpa_m3" type="taxel_array_to_skin_contact.py"
            output="log" name="taxel_array_to_skin_contact" />
        <node pkg="hrl_software_simulation_darpa_m3" 
            type="simulator" output="screen" name="simulator">
            <remap from='/skin/contacts' to='/skin/contacts_unused' />
        </node>
    </group>

    <group unless="$(arg use_taxels)">
        <group if="$(arg simulate_ft_sensor_at_link_base)">
            <!-- simulate FT sensor at the base of each link. -->
            <node pkg="hrl_common_code_darpa_m3"
                type="skin_contact_to_resultant_force.py"
                output="log" name="skin_contact_to_resultant_force" />
            <node pkg="hrl_software_simulation_darpa_m3" 
                type="simulator" output="screen" name="simulator">
                <remap from='/skin/contacts' to='/skin/contacts_all' />
                <remap from='/skin/taxel_array' to='/skin/taxel_array_unused' />
            </node>
        </group>

        <group unless="$(arg simulate_ft_sensor_at_link_base)">
            <!-- run without skin taxels. -->
            <node pkg="hrl_software_simulation_darpa_m3" type="simulator" output="screen" name="simulator" >
                <remap from='/skin/taxel_array' to='/skin/taxel_array_unused' />
            </node>
        </group>
    </group>

    <!-- This is where robot linkage and initial configuration is defined -->
    <group unless="$(arg with_hand)">
        <node pkg="hrl_software_simulation_darpa_m3" type="sim_arm_param_upload.py" output="log"
            args="--planar_three_link_capsule" name="robot_params" >
        </node>
    </group>

    <group if="$(arg with_hand)">
        <node pkg="hrl_software_simulation_darpa_m3" type="sim_arm_param_upload.py" output="log"
            args="--three_link_with_hand" name="robot_params" >
        </node>
    </group>

    <!-- xmin 0.2 xmax 0.6 ymin -0.5 ymax 0.2 -->	
    <!-- xmin 0.2 xmax 0.9 ymin -0.6 ymax 0.6 -->
    <group if="$(arg random)">
        <node pkg="hrl_common_code_darpa_m3" type="obstacles.py" output="log"
            name="obstacles" args="--fixed=$(arg n_fixed) --sliding=$(arg n_sliding) --xmin=0.2 --xmax=0.6 --ymin=-0.5 --ymax=0.2 --radius=$(arg radius) --compliant=$(arg n_compliant) --stiffness_value=$(arg stiffness_value)" />
    </group>

    <!-- visualization nodes -->

    <include file='$(find hrl_software_simulation_darpa_m3)/launch/ode_sim_viz.launch'>
        <arg name="use_taxels" value="$(arg use_taxels)" />
        <arg name="simulate_ft_sensor_at_link_base" value="$(arg simulate_ft_sensor_at_link_base)" />
    </include>


</launch>


