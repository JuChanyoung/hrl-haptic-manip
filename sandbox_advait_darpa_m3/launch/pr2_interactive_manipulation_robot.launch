<launch>

  <!-- set stereo to true for narrow stereo, false for kinect -->
  <arg name="stereo" default="false" />
  <arg name="cvfh" default="false" />
  <arg name="tod" default="false" />
  <arg name="model_set" default="REDUCED_MODEL_SET"/>
  <arg name="joy" default="false" />
  <arg name="nav" default="false" />
  <arg name="wg" default="false" />
  <arg name="nav_local" default="false" />
  <arg name="nav_3d" default="false" />
  <arg name="nav_slam" default="false" />
  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_probabilistic_grasp_planner" default="false"/>
  <arg name="log_to_warehouse" default="false"/>
  <arg name="do_preplan_scan" default="false"/>
  <arg name="do_monitoring" default="false"/>
  <arg name="use_right_arm" default="true" />
  <arg name="use_left_arm"  default="true" />
  <arg name="sim" default="false" />
  <arg name="double_menu" default="false" />
  <arg name="flatten_table" default="false"/>	
  <arg name="tf_throttled" default="false"/>	
  <arg name="jpeg_quality" default="60"/>	
  <arg name="use_jinv" default="false" />
  <arg name="slow_movement" default="false" />

  <!-- assumes Kinect frame names end in _rgb_optical_frame and _depth_optical_frame -->
  <arg name="kinect_frame_prefix" default="/openni" />  

  <!-- tf throttling -->
  <include if="$(arg tf_throttled)" file="$(find pr2_interactive_manipulation)/launch/tf_throttled.launch"/>

  <!-- rviz camera configurations -->
  <rosparam command="load" file="$(find pr2_object_manipulation_launch)/config/camera_configurations.yaml"/>

  <!-- interactive manipulation backend -->
  <node pkg="pr2_interactive_manipulation" type="interactive_manipulation_backend_node"
   name="interactive_manipulation_backend_node" respawn="false" output="screen">

    <remap from="right_arm/constraint_aware_ik" to="/pr2_right_arm_kinematics/get_constraint_aware_ik" />    
    <remap from="left_arm/constraint_aware_ik" to="/pr2_left_arm_kinematics/get_constraint_aware_ik" />    
      
    <remap from="right_arm/get_ik_solver_info" to="/pr2_right_arm_kinematics/get_ik_solver_info" />    
    <remap from="left_arm/get_ik_solver_info" to="/pr2_left_arm_kinematics/get_ik_solver_info" />    
      
    <remap from="right_arm/get_state_validity" to="/environment_server_right_arm/get_state_validity" />    
    <remap from="left_arm/get_state_validity" to="/environment_server_left_arm/get_state_validity" />    
      
    <remap from="right_arm/move_arm" to="/move_right_arm" />    
    <remap from="left_arm/move_arm" to="/move_left_arm" />    
      
    <remap from="right_arm/hand_posture_execution" to="/r_gripper_grasp_posture_controller" />    
    <remap from="left_arm/hand_posture_execution" to="/l_gripper_grasp_posture_controller" />    
      
    <remap from="right_arm/grasp_status" to="/r_gripper_grasp_status" />
    <remap from="left_arm/grasp_status" to="/l_gripper_grasp_status" />
      
    <remap from="right_arm/joint_trajectory" to="/r_arm_controller/joint_trajectory_action" />
    <remap from="left_arm/joint_trajectory" to="/l_arm_controller/joint_trajectory_action" />

    <remap from="switch_controller" to="pr2_controller_manager/switch_controller"/>
    <remap from="list_controllers" to="pr2_controller_manager/list_controllers"/>      
    <remap from="right_arm/cart/command_pose" to="/r_cart/command_pose" />
    <remap from="left_arm/cart/command_pose" to="/l_cart/command_pose" />
    <remap from="right_arm/cart/command_posture" to="/r_cart/command_posture" />
    <remap from="left_arm/cart/command_posture" to="/l_cart/command_posture" />
    <remap from="right_arm/cart/gains" to="/r_cart/gains" />
    <remap from="left_arm/cart/gains" to="/l_cart/gains" />
    <param name="right_arm_cartesian_controller" value="r_cart" /> 
    <param name="left_arm_cartesian_controller" value="l_cart" />
    <param name="right_arm_joint_controller" value="r_arm_controller" />
    <param name="left_arm_joint_controller" value="l_arm_controller" />

    <remap unless="$(arg use_slip_controllers)" from="left_arm/gripper_action" 
                                                to="/l_gripper_controller/gripper_action"/>
    <remap unless="$(arg use_slip_controllers)" from="right_arm/gripper_action" 
                                                to="/r_gripper_controller/gripper_action"/>

    <remap if="$(arg use_slip_controllers)" from="left_arm/gripper_action" 
                                            to="/l_gripper_sensor_controller/gripper_action"/>
    <remap if="$(arg use_slip_controllers)" from="right_arm/gripper_action" 
                                            to="/r_gripper_sensor_controller/gripper_action"/>

    <!-- Note: this assumes the database communication node gets started externally, which is not ideal. -->
    <!-- Right now, that node gets started by the interactive recognition launch file. -->
    <param name="get_model_mesh_srv" value="/objects_database_node/get_model_mesh" />

    <param name="cartesian_dist_tol" value="0.001" />
    <param name="cartesian_angle_tol" value="0.05" />
    <param name="cartesian_overshoot_dist" value="0.005" />
    <param name="cartesian_overshoot_angle" value="0.087" />

    <remap from="/get_pose_server" to="/pr2_interactive_gripper_pose_action" />

    <remap if="$(arg nav_local)" from="/move_base" to="/move_base_local" />
  </node>

  <!-- manipulation prerequisites -->
  <include file="$(find pr2_object_manipulation_launch)/launch/pr2_manipulation_prerequisites.launch">
    <arg name="stereo" value="$(arg stereo)"/>
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>
    <arg name="log_to_warehouse" value="$(arg log_to_warehouse)"/>
    <arg name="do_monitoring" value="$(arg do_monitoring)"/>
    <arg name="do_preplan_scan" value="$(arg do_preplan_scan)"/>
    <arg name="kinect_frame_prefix" value="$(arg kinect_frame_prefix)"/>
  </include>

  <!-- manipulation -->
  <include file="$(find pr2_object_manipulation_launch)/launch/pr2_manipulation.launch">
    <arg name="use_slip_controllers" value="$(arg use_slip_controllers)"/>
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>
	  <arg name="sim" value="$(arg sim)"/>
	  <arg name="use_jinv" value="$(arg use_jinv)"/>
    <arg name="use_probabilistic_grasp_planner" value="$(arg use_probabilistic_grasp_planner)"/>
  </include>

  <!-- run image_rotate for both forearm camera images -->
  <node type="image_rotate" name="l_forearm_image_rotate" pkg="image_rotate" args="image:=l_forearm_cam/image_color rotated/image:=l_forearm_cam/image_color_rotated"/>
  <node type="image_rotate" name="r_forearm_image_rotate" pkg="image_rotate" args="image:=r_forearm_cam/image_color rotated/image:=r_forearm_cam/image_color_rotated"/>

  <!-- bring down compression for images, so it works over wifi -->
  <node name="$(anon foo)" pkg="dynamic_reconfigure" type="dynparam"
	args="set /wide_stereo/left/image_color/compressed/ '{'format': jpeg, 'jpeg_quality': $(arg jpeg_quality)}'"/>
  <node name="$(anon foo)" pkg="dynamic_reconfigure" type="dynparam"
	args="set /wide_stereo/right/image_color/compressed/ '{'format': jpeg, 'jpeg_quality': $(arg jpeg_quality)}'"/>
  <node name="$(anon foo)" pkg="dynamic_reconfigure" type="dynparam"
	args="set /r_forearm_cam/image_color_rotated/compressed/ '{'format': jpeg, 'jpeg_quality': $(arg jpeg_quality)}'"/>
  <node name="$(anon foo)" pkg="dynamic_reconfigure" type="dynparam"
	args="set /l_forearm_cam/image_color_rotated/compressed/ '{'format': jpeg, 'jpeg_quality': $(arg jpeg_quality)}'"/>
  <node name="$(anon foo)" pkg="dynamic_reconfigure" type="dynparam"
	args="set /camera/rgb/image_color/compressed/ '{'format': jpeg, 'jpeg_quality': $(arg jpeg_quality)}'"/>


  <!-- Interactive Marker Teleop -->
  <include file="$(find sandbox_advait_darpa_m3)/launch/marker_control.launch">
    <arg name="use_slip_controllers" value="$(arg use_slip_controllers)"/>
    <arg name="stereo" value="$(arg stereo)"/>
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>
    <arg name="use_state_validator" value="false"/>
    <arg name="double_menu" value="$(arg double_menu)"/>
    <arg name="kinect_frame_prefix" value="$(arg kinect_frame_prefix)"/>
    <arg name="nav_local" value="$(arg nav_local)"/>
    <arg name="slow_movement" value="$(arg slow_movement)"/>
    <arg name="nav_3d" value="$(arg nav_3d)"/>
  </include>


  <!-- cloud server -->
  <include file="$(find point_cloud_server)/launch/cloud_server.launch" >
    <arg name="stereo" value="$(arg stereo)"/>
  </include>
  

</launch>

