"""autogenerated by genpy from hrl_haptic_manipulation_in_clutter_msgs/RobotHapticState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hrl_haptic_manipulation_in_clutter_msgs.msg
import std_msgs.msg

class RobotHapticState(genpy.Message):
  _md5sum = "4ef8a46b3c9c12684f840f17a9ab457f"
  _type = "hrl_haptic_manipulation_in_clutter_msgs/RobotHapticState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

string[] joint_names
float64[] joint_angles
float64[] desired_joint_angles
float64[] joint_velocities
float64[] joint_stiffness
float64[] joint_damping

geometry_msgs/Pose torso_pose
geometry_msgs/Pose hand_pose

std_msgs/Float64MultiArray end_effector_jacobian
std_msgs/Float64MultiArray contact_jacobians

hrl_haptic_manipulation_in_clutter_msgs/TaxelArray[] skins


                                                                               

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Float64MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float64[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding bytes at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.
================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: hrl_haptic_manipulation_in_clutter_msgs/TaxelArray
Header header

string sensor_type

string[] link_names

float64[] centers_x
float64[] centers_y
float64[] centers_z

float64[] normals_x
float64[] normals_y
float64[] normals_z

float64[] values_x
float64[] values_y
float64[] values_z




"""
  __slots__ = ['header','joint_names','joint_angles','desired_joint_angles','joint_velocities','joint_stiffness','joint_damping','torso_pose','hand_pose','end_effector_jacobian','contact_jacobians','skins']
  _slot_types = ['std_msgs/Header','string[]','float64[]','float64[]','float64[]','float64[]','float64[]','geometry_msgs/Pose','geometry_msgs/Pose','std_msgs/Float64MultiArray','std_msgs/Float64MultiArray','hrl_haptic_manipulation_in_clutter_msgs/TaxelArray[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,joint_names,joint_angles,desired_joint_angles,joint_velocities,joint_stiffness,joint_damping,torso_pose,hand_pose,end_effector_jacobian,contact_jacobians,skins

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotHapticState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint_names is None:
        self.joint_names = []
      if self.joint_angles is None:
        self.joint_angles = []
      if self.desired_joint_angles is None:
        self.desired_joint_angles = []
      if self.joint_velocities is None:
        self.joint_velocities = []
      if self.joint_stiffness is None:
        self.joint_stiffness = []
      if self.joint_damping is None:
        self.joint_damping = []
      if self.torso_pose is None:
        self.torso_pose = geometry_msgs.msg.Pose()
      if self.hand_pose is None:
        self.hand_pose = geometry_msgs.msg.Pose()
      if self.end_effector_jacobian is None:
        self.end_effector_jacobian = std_msgs.msg.Float64MultiArray()
      if self.contact_jacobians is None:
        self.contact_jacobians = std_msgs.msg.Float64MultiArray()
      if self.skins is None:
        self.skins = []
    else:
      self.header = std_msgs.msg.Header()
      self.joint_names = []
      self.joint_angles = []
      self.desired_joint_angles = []
      self.joint_velocities = []
      self.joint_stiffness = []
      self.joint_damping = []
      self.torso_pose = geometry_msgs.msg.Pose()
      self.hand_pose = geometry_msgs.msg.Pose()
      self.end_effector_jacobian = std_msgs.msg.Float64MultiArray()
      self.contact_jacobians = std_msgs.msg.Float64MultiArray()
      self.skins = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.joint_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_angles))
      length = len(self.desired_joint_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.desired_joint_angles))
      length = len(self.joint_velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_velocities))
      length = len(self.joint_stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_stiffness))
      length = len(self.joint_damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_damping))
      _x = self
      buff.write(_struct_14d.pack(_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.hand_pose.position.x, _x.hand_pose.position.y, _x.hand_pose.position.z, _x.hand_pose.orientation.x, _x.hand_pose.orientation.y, _x.hand_pose.orientation.z, _x.hand_pose.orientation.w))
      length = len(self.end_effector_jacobian.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.end_effector_jacobian.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.end_effector_jacobian.layout.data_offset))
      length = len(self.end_effector_jacobian.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.end_effector_jacobian.data))
      length = len(self.contact_jacobians.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_jacobians.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.contact_jacobians.layout.data_offset))
      length = len(self.contact_jacobians.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.contact_jacobians.data))
      length = len(self.skins)
      buff.write(_struct_I.pack(length))
      for val1 in self.skins:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.sensor_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.link_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.link_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.centers_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.centers_x))
        length = len(val1.centers_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.centers_y))
        length = len(val1.centers_z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.centers_z))
        length = len(val1.normals_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.normals_x))
        length = len(val1.normals_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.normals_y))
        length = len(val1.normals_z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.normals_z))
        length = len(val1.values_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.values_x))
        length = len(val1.values_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.values_y))
        length = len(val1.values_z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.values_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.torso_pose is None:
        self.torso_pose = geometry_msgs.msg.Pose()
      if self.hand_pose is None:
        self.hand_pose = geometry_msgs.msg.Pose()
      if self.end_effector_jacobian is None:
        self.end_effector_jacobian = std_msgs.msg.Float64MultiArray()
      if self.contact_jacobians is None:
        self.contact_jacobians = std_msgs.msg.Float64MultiArray()
      if self.skins is None:
        self.skins = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.desired_joint_angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_velocities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_stiffness = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_damping = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 112
      (_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.hand_pose.position.x, _x.hand_pose.position.y, _x.hand_pose.position.z, _x.hand_pose.orientation.x, _x.hand_pose.orientation.y, _x.hand_pose.orientation.z, _x.hand_pose.orientation.w,) = _struct_14d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.end_effector_jacobian.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.end_effector_jacobian.layout.dim.append(val1)
      start = end
      end += 4
      (self.end_effector_jacobian.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_effector_jacobian.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_jacobians.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.contact_jacobians.layout.dim.append(val1)
      start = end
      end += 4
      (self.contact_jacobians.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.contact_jacobians.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skins = []
      for i in range(0, length):
        val1 = hrl_haptic_manipulation_in_clutter_msgs.msg.TaxelArray()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _struct_I.unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8')
        else:
          _v3.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sensor_type = str[start:end].decode('utf-8')
        else:
          val1.sensor_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.link_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.link_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.centers_x = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.centers_y = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.centers_z = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.normals_x = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.normals_y = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.normals_z = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values_x = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values_y = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values_z = struct.unpack(pattern, str[start:end])
        self.skins.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.joint_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_angles.tostring())
      length = len(self.desired_joint_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.desired_joint_angles.tostring())
      length = len(self.joint_velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_velocities.tostring())
      length = len(self.joint_stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_stiffness.tostring())
      length = len(self.joint_damping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_damping.tostring())
      _x = self
      buff.write(_struct_14d.pack(_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.hand_pose.position.x, _x.hand_pose.position.y, _x.hand_pose.position.z, _x.hand_pose.orientation.x, _x.hand_pose.orientation.y, _x.hand_pose.orientation.z, _x.hand_pose.orientation.w))
      length = len(self.end_effector_jacobian.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.end_effector_jacobian.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.end_effector_jacobian.layout.data_offset))
      length = len(self.end_effector_jacobian.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.end_effector_jacobian.data.tostring())
      length = len(self.contact_jacobians.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_jacobians.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.contact_jacobians.layout.data_offset))
      length = len(self.contact_jacobians.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.contact_jacobians.data.tostring())
      length = len(self.skins)
      buff.write(_struct_I.pack(length))
      for val1 in self.skins:
        _v5 = val1.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.sensor_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.link_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.link_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.centers_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.centers_x.tostring())
        length = len(val1.centers_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.centers_y.tostring())
        length = len(val1.centers_z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.centers_z.tostring())
        length = len(val1.normals_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.normals_x.tostring())
        length = len(val1.normals_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.normals_y.tostring())
        length = len(val1.normals_z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.normals_z.tostring())
        length = len(val1.values_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.values_x.tostring())
        length = len(val1.values_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.values_y.tostring())
        length = len(val1.values_z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.values_z.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.torso_pose is None:
        self.torso_pose = geometry_msgs.msg.Pose()
      if self.hand_pose is None:
        self.hand_pose = geometry_msgs.msg.Pose()
      if self.end_effector_jacobian is None:
        self.end_effector_jacobian = std_msgs.msg.Float64MultiArray()
      if self.contact_jacobians is None:
        self.contact_jacobians = std_msgs.msg.Float64MultiArray()
      if self.skins is None:
        self.skins = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.desired_joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_stiffness = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_damping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 112
      (_x.torso_pose.position.x, _x.torso_pose.position.y, _x.torso_pose.position.z, _x.torso_pose.orientation.x, _x.torso_pose.orientation.y, _x.torso_pose.orientation.z, _x.torso_pose.orientation.w, _x.hand_pose.position.x, _x.hand_pose.position.y, _x.hand_pose.position.z, _x.hand_pose.orientation.x, _x.hand_pose.orientation.y, _x.hand_pose.orientation.z, _x.hand_pose.orientation.w,) = _struct_14d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.end_effector_jacobian.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.end_effector_jacobian.layout.dim.append(val1)
      start = end
      end += 4
      (self.end_effector_jacobian.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_effector_jacobian.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_jacobians.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.contact_jacobians.layout.dim.append(val1)
      start = end
      end += 4
      (self.contact_jacobians.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.contact_jacobians.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skins = []
      for i in range(0, length):
        val1 = hrl_haptic_manipulation_in_clutter_msgs.msg.TaxelArray()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _struct_I.unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8')
        else:
          _v7.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sensor_type = str[start:end].decode('utf-8')
        else:
          val1.sensor_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.link_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.link_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.centers_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.centers_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.centers_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.normals_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.normals_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.normals_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.skins.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_14d = struct.Struct("<14d")
_struct_2I = struct.Struct("<2I")
